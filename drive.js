"use strict";

// https://developers.google.com/drive/v3/web/quickstart/nodejs
const google = require('googleapis'),
    index = require('./index.js'),
    datastore = require('./datastore.js');

let oauth2Client = new google.auth.OAuth2(process.env.GOOGLE_CLIENT_ID,
    process.env.GOOGLE_CLIENT_SECRET,
    process.env.GOOGLE_REDIRECT_URL
);
let googleUser;
const colors = [
    "#397AF2",
    "#E73A2F",
    "#FBB308",
    "#2E9E49"
];

/**
 * Generates the url the user should navigate to
 * 
 * @return {url} The url generated by googles client library
 */
function getAuthUrl() {
    console.log("getAuthUrl");
    let url = oauth2Client.generateAuthUrl({
        access_type: "offline", // will return a refresh token
        scope: "https://www.googleapis.com/auth/drive.readonly" // can be a space-delimited string or an array of scopes
    });
    //console.log("google url = " + url);
    return url;
}

/**
 * Stores the access token in the database
 * 
 * @param {Object} token - The token to be stored, possibly containing refresh_token
 */
function storeTokens(token) {
    let paths = [];
    let args;

    if (token.refresh_token) {
        // Should be authenticating for first time, store entire object	
        args = {
            access_token: token,
            refresh_token: token.refresh_token
        };
    } else {
        // Every time afterwards, only modify the access_token field	
        args = token;
        paths.push("access_token");
    }

    datastore.set(index.slack.payload.user_id, "gsuite", args, paths).then(function(data) {
        console.log("Stored token for user: " + index.slack.payload.user_id, data);
    }).catch(function(err) {
        console.log("Error updating/inserting user:", err);
    });
}

/**
 * Retrieves users credentials, or if none found authenticates the user
 * 
 * @param {string} query - The term to search
 */
function queryDrive(query) {
    console.log("queryDrive");
    // Check if we have previously stored a token
    datastore.get(index.slack.payload.user_id).then(function(user) {
        if (!user.tokens || !user.tokens.gsuite.access_token) {
            userShouldLogin("Error, didn't find google credentials");
        } else {
            googleUser = user;
            // Attempt to use stored credentials, and use these to access the files
            console.log("Successfully retrieved google access token:", user.tokens.gsuite.access_token);
            let token = user.tokens.gsuite.access_token;
            oauth2Client.setCredentials(token);
            listFiles(query);
        }
    }).catch(function(err) {
        userShouldLogin("Error, didn't find credentials:", err);
    });
}

/**
 * Refreshes the users access token  
 * 
 * @param {string} search - The term to search
 */
function reauthenticate(search) {
    console.log("Reauthenticating...");
    if (!googleUser || !googleUser.tokens.gsuite.refresh_token) {
        return userShouldLogin("Didn't find refresh token");
    }
    let refresh = googleUser.tokens.gsuite.refresh_token;
    console.log("Refresh token:", refresh);

    oauth2Client.credentials.refresh_token = refresh;
    oauth2Client.refreshAccessToken(function(err, tokens) {
        if (err) {
            userShouldLogin("Error refreshing:", err);
        } else {
            storeTokens(tokens);
            listFiles(search);
        }
    }).catch(function(err) {
        userShouldLogin("Didn't find refresh token:", err);
    });
}

/**
 * Once the user has been authenticated, access user's 
 * Google drive, searches for files, then sends results to the user
 * 
 * @param {string} search - The term to search
 */
function listFiles(search) {
    console.log("listFiles");
    let drive = google.drive({ version: "v3", auth: oauth2Client });
    let p = new Promise(function(resolve, reject) {
        let escapedStr = search.replace("'", "\\'");
        let query = "name contains '" + escapedStr + "' or fullText contains '" + escapedStr + "'";
        drive.files.list({
            auth: oauth2Client,
            pageSize: 5,
            fields: "files(id, name, webViewLink)",
            q: query
        }, function(err, resp) {
            if (err) {
                return reject(err);
            }
            resolve(resp);
        });
    }).then(function(data) {
        let message = "";
        let attachments = [];
        if (!data || !data.files || data.files.length === 0) {
            message = "No files matched, whoopsie!";
        } else {
            message = "Found documents matching: " + search;
            attachments = parse(data);
        }
        index.send(message, attachments);
    }).catch(function(err) {
        console.log("List files error", err);
        reauthenticate(search);
    });
}

/**
 * Retrieves a new access token based on the given access code
 * 
 * @param {string} code - The access code from the url
 * @param {callback} callback - Displays status on screen
 */
function getToken(code, callback) {
    console.log("getToken");
    oauth2Client.getToken(code, function(err, tokens) {
        // Now tokens contains an access_token and an optional refresh_token. Save them.
        if (!err && tokens) {
            oauth2Client.setCredentials(tokens);
            storeTokens(tokens);
            index.search();
            callback(`<h3>Successfully logged in! You can close me now</h3>`);
        }
        else {
            console.log("Error in callback", err);
            index.send("Error!!");
            callback(`<h1>Error!!</h1>`);
        }
    });
}

/**
 * Parses the retrieved documents and bundles up as slack attachments
 * 
 * @param {Object} json - The retrieved documents
 */
function parse(json) {
    let response = [];
    let index = 0;
    json.files.forEach(function(file) {
        response.push(createAttachment(file, index++));
    });
    return response;
}

/**
 * Creates a slack attachment with a google color
 * 
 * @param {File} file - the google file object to be send
 * @param {int} index - Makes the attachment pretty with google colors
 */
function createAttachment(file, index) {
    return {
        "title": file.name,
        "title_link": file.webViewLink,
        "color": colors[index % colors.length]
    };
}

/**
 * Creates the login attachment
 * 
 * @param {string} url - The url the user should open to be authenticated
 */
function createUrlAttachment(url) {
    return [{
        "title": "Login",
        "title_link": url
    }];
}

/**
 * Tells the user to login with an authentication url
 * 
 * @param {string} message - Message to printed to the console line
 * @param {Object} err - Error printed to the console line
 */
function userShouldLogin(message, err) {
    console.log(message, err);
    let url = getAuthUrl();
    let attachment = createUrlAttachment(url);
    index.send("You aren't logged in", attachment);
}

module.exports.getAuthUrl = getAuthUrl;
module.exports.storeTokens = storeTokens;
module.exports.getToken = getToken;
module.exports.listFiles = listFiles;
module.exports.queryDrive = queryDrive;